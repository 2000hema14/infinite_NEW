//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _MiniProject_
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MiniCaseStudyDBEntities : DbContext
    {
        public MiniCaseStudyDBEntities()
            : base("name=MiniCaseStudyDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<CancellationDetail> CancellationDetails { get; set; }
        public virtual DbSet<train> trains { get; set; }
    
        public virtual int AddTrain(Nullable<int> trainId, string @class, string trainName, string fromStation, string toStation, Nullable<int> totalBerths, Nullable<int> availableBerths, Nullable<decimal> fare, string isActive)
        {
            var trainIdParameter = trainId.HasValue ?
                new ObjectParameter("trainId", trainId) :
                new ObjectParameter("trainId", typeof(int));
    
            var classParameter = @class != null ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(string));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("trainName", trainName) :
                new ObjectParameter("trainName", typeof(string));
    
            var fromStationParameter = fromStation != null ?
                new ObjectParameter("fromStation", fromStation) :
                new ObjectParameter("fromStation", typeof(string));
    
            var toStationParameter = toStation != null ?
                new ObjectParameter("toStation", toStation) :
                new ObjectParameter("toStation", typeof(string));
    
            var totalBerthsParameter = totalBerths.HasValue ?
                new ObjectParameter("totalBerths", totalBerths) :
                new ObjectParameter("totalBerths", typeof(int));
    
            var availableBerthsParameter = availableBerths.HasValue ?
                new ObjectParameter("availableBerths", availableBerths) :
                new ObjectParameter("availableBerths", typeof(int));
    
            var fareParameter = fare.HasValue ?
                new ObjectParameter("fare", fare) :
                new ObjectParameter("fare", typeof(decimal));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrain", trainIdParameter, classParameter, trainNameParameter, fromStationParameter, toStationParameter, totalBerthsParameter, availableBerthsParameter, fareParameter, isActiveParameter);
        }
    
        public virtual int BookTicket(Nullable<int> trainId, string @class, string passengerName, Nullable<int> seatsBooked, Nullable<System.DateTime> bookingDate, Nullable<System.DateTime> departureDate, Nullable<System.DateTime> dateOfTravel)
        {
            var trainIdParameter = trainId.HasValue ?
                new ObjectParameter("trainId", trainId) :
                new ObjectParameter("trainId", typeof(int));
    
            var classParameter = @class != null ?
                new ObjectParameter("class", @class) :
                new ObjectParameter("class", typeof(string));
    
            var passengerNameParameter = passengerName != null ?
                new ObjectParameter("passengerName", passengerName) :
                new ObjectParameter("passengerName", typeof(string));
    
            var seatsBookedParameter = seatsBooked.HasValue ?
                new ObjectParameter("seatsBooked", seatsBooked) :
                new ObjectParameter("seatsBooked", typeof(int));
    
            var bookingDateParameter = bookingDate.HasValue ?
                new ObjectParameter("bookingDate", bookingDate) :
                new ObjectParameter("bookingDate", typeof(System.DateTime));
    
            var departureDateParameter = departureDate.HasValue ?
                new ObjectParameter("departureDate", departureDate) :
                new ObjectParameter("departureDate", typeof(System.DateTime));
    
            var dateOfTravelParameter = dateOfTravel.HasValue ?
                new ObjectParameter("dateOfTravel", dateOfTravel) :
                new ObjectParameter("dateOfTravel", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BookTicket", trainIdParameter, classParameter, passengerNameParameter, seatsBookedParameter, bookingDateParameter, departureDateParameter, dateOfTravelParameter);
        }
    
        public virtual int CancelTicket(Nullable<int> bookingId, Nullable<int> seatsToCancel)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("bookingId", bookingId) :
                new ObjectParameter("bookingId", typeof(int));
    
            var seatsToCancelParameter = seatsToCancel.HasValue ?
                new ObjectParameter("seatsToCancel", seatsToCancel) :
                new ObjectParameter("seatsToCancel", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CancelTicket", bookingIdParameter, seatsToCancelParameter);
        }
    
        public virtual int DeleteTrain(Nullable<int> trainId)
        {
            var trainIdParameter = trainId.HasValue ?
                new ObjectParameter("trainId", trainId) :
                new ObjectParameter("trainId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTrain", trainIdParameter);
        }
    
        public virtual ObjectResult<GetAvailableBerths_Result> GetAvailableBerths()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAvailableBerths_Result>("GetAvailableBerths");
        }
    
        public virtual ObjectResult<ViewBookings_Result> ViewBookings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewBookings_Result>("ViewBookings");
        }
    
        public virtual ObjectResult<ViewCancellations_Result> ViewCancellations()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewCancellations_Result>("ViewCancellations");
        }
    }
}
